// GPC Online Library
// battlefield_2042_-_gl0zz3n_mouse_and_keyboard.gpc

/*
██╗███╗░░██╗░██████╗████████╗██████╗░██╗░░░██╗░█████╗░████████╗██╗░█████╗░███╗░░██╗░██████╗██╗
██║████╗░██║██╔════╝╚══██╔══╝██╔══██╗██║░░░██║██╔══██╗╚══██╔══╝██║██╔══██╗████╗░██║██╔════╝╚═╝
██║██╔██╗██║╚█████╗░░░░██║░░░██████╔╝██║░░░██║██║░░╚═╝░░░██║░░░██║██║░░██║██╔██╗██║╚█████╗░░░░
██║██║╚████║░╚═══██╗░░░██║░░░██╔══██╗██║░░░██║██║░░██╗░░░██║░░░██║██║░░██║██║╚████║░╚═══██╗░░░
██║██║░╚███║██████╔╝░░░██║░░░██║░░██║╚██████╔╝╚█████╔╝░░░██║░░░██║╚█████╔╝██║░╚███║██████╔╝██╗
╚═╝╚═╝░░╚══╝╚═════╝░░░░╚═╝░░░╚═╝░░╚═╝░╚═════╝░░╚════╝░░░░╚═╝░░░╚═╝░╚════╝░╚═╝░░╚══╝╚═════╝░╚═╝


	YOU WILL NEED TO ASSIGN WHICH KEYBOARD KEYS YOU WANT TO TOGGLE THE DIFFERENT MODS IN THIS SCRIPT.
	I PERSONALLY USE THE F1-F12 KEYS, BUT YOU CAN SET THESE TO BE WHATEVER YOU LIKE BY CHANGING THE NAME OF THE KEY.
	
	IF YOU REQUIRE ASSISTANCE GETTING EVERYTHING SETUP, PLEASE LEAVE A COMMENT IN ONE OF MY YOUTUBE VIDEOS AND I WILL GET BACK TO YOU ASAP.
	
	EX: "RAPID_FIRE_KEY" WILL TOGGLE THE RAPID-FIRE MOD ON/OFF. BY DEFAULT, IT IS SET TO TOGGLE ON/OFF USING THE F2 KEY ON YOUR KEYBOARD "KEY_F2"
		 IF YOU WANT TO USE A DIFFERNT KEYBOARD KEY TO TOGGLE THIS MOD, REPLACE "KEY_F2" WITH WHATEVER KEYBOARD KEY YOU WANT TO USE.
		 YOU CAN FIND A LIST OF KEYBOARD KEY IDENTIFIERS HERE: https://gpc.cronusmax.com/constants/keyboard-and-mouse/keyboard-constants

		 
		 

████████╗██╗░░██╗░█████╗░███╗░░██╗██╗░░██╗  ██╗░░░██╗░█████╗░██╗░░░██╗██╗
╚══██╔══╝██║░░██║██╔══██╗████╗░██║██║░██╔╝  ╚██╗░██╔╝██╔══██╗██║░░░██║██║
░░░██║░░░███████║███████║██╔██╗██║█████═╝░  ░╚████╔╝░██║░░██║██║░░░██║██║
░░░██║░░░██╔══██║██╔══██║██║╚████║██╔═██╗░  ░░╚██╔╝░░██║░░██║██║░░░██║╚═╝
░░░██║░░░██║░░██║██║░░██║██║░╚███║██║░╚██╗  ░░░██║░░░╚█████╔╝╚██████╔╝██╗
░░░╚═╝░░░╚═╝░░╚═╝╚═╝░░╚═╝╚═╝░░╚══╝╚═╝░░╚═╝  ░░░╚═╝░░░░╚════╝░░╚═════╝░╚═╝
		 
	IF YOU HAVE DOWNLOADED THIS SCRIPT, PLEASE SUBSCRIBE TO MY YOUTUBE CHANNEL SO THAT YOU CAN RECEIVE UPDATES ON NEW SCRIPT RELEASES.
	I HAVE TONS OF TUTORIALS AND DEMONSTRATION VIDEOS AND YOUR SUPPORT MAKES ALL OF THIS POSSIBLE. THANK YOU FOR SUPPPORTING MY CHANNEL.
	
	https://www.youtube.com/GL0ZZ3NTECHREVIEWS

*/



define AUTO_MOVEMENT_KEY = KEY_TAB ; // Set a key to have your character automatically sprint forward. Auto-Movement will disable when you press the "W" or "D" key.

define CIRCLE_WALK_KEY = KEY_LEFTALT ; // Set a key to activate the Circle-Walk mod. Your character will move in small circles while held and will stop when released.
define CIRCLE_WALK_TIMER = 300 ; // Adjust this value to control how long your character moves before changing direction while using the Circle-Walk mod.

define RAPID_FIRE_KEY = KEY_F2 ;
define BINARY_TRIGGER_KEY = KEY_F1 ;
define SEMI_AUTO_KEY = KEY_F3 ;
define AUTO_SPOT_KEY = KEY_F5 ;
define TURBO_MELEE_KEY = KEY_F7 ;
define ANTI_RECOIL_KEY = KEY_F6 ;
define INCREASE_ANTI_RECOIL_STRENGTH_KEY = KEY_PAGEDOWN ;
define DECREASE_ANTI_RECOIL_STRENGTH_KEY = KEY_PAGEUP ;


define ANTI_SPAM_TIMER = 2000 ; // Adjust this value to control the delay between automatic spots - 1000 = 1 second. 1500 = 1.5 seconds. 2000 = 2 seconds.

int invert_y = TRUE ; // Use TRUE if you play with an INVERTED Y-Axis. Use FALSE if you play with a REGULAR Y-Axis.
int in_game_deadzone = 22; // Set this number to match your CONTROLLER RIGHT STICK -> Center Deadzone in-game setting located in Controller Tuning menu.
int anti_recoil_strength = 27; // Set this number the control the strength of the Anti-Recoil mod.
/*
HOW TO TUNE ANTI-RECOIL:
	If your gun moves UP when your fire, you need to use a LARGER number for your anti_recoil_strength setting.
	If your gun moves DOWN towards the ground when your fire, you need to use a SMALLER number for your anti_recoil_strength setting.
	
HOW TO FINE-TUNE RECOIL VALUES IN-GAME:
		1: Go into ADS and start FIRING YOUR GUN.
		2a: If your gun moves UP, you need to press the "INCREASE_ANTI_RECOIL_STRENGTH_KEY" that you have set above until your gun stays level while firing.
		2b: If your gun moves DOWN, you need to press the "DECREASE_ANTI_RECOIL_STRENGTH_KEY" that you have set above until your gun stays level while firing.

		ex: 
		If your gun is shooting down, towards the ground when you are firing, hold the FIRE-BUTTON and keep tapping "DECREASE_ANTI_RECOIL_STRENGTH_KEY" until your gun stays level.
	
	
ANTI-RECOIL WEAPON SETTINGS:
	SMG:
		PBX-45 = 25
		PP-29 = 27
	_________________	
	ASSAULT:
		M5A3 = 25
		AK-24 = 25
	_________________	
	LMG:
		LCMG = 25
	_________________	
	MARKSMAN:
		DM7 = 28
		SVK = 29
	_________________	
	UTILITY:
		MCS-880 = 27;
		GVT 45-70 = 27
	_________________	
	SECONDARY:
		G57 = 28
		MP28 = 27
	_________________
*/


/* 
	DO NOT TOUCH ANYTHING BELOW THIS LINE!!
	DO NOT TOUCH ANYTHING BELOW THIS LINE!!
	DO NOT TOUCH ANYTHING BELOW THIS LINE!!
	DO NOT TOUCH ANYTHING BELOW THIS LINE!!
	DO NOT TOUCH ANYTHING BELOW THIS LINE!!
	DO NOT TOUCH ANYTHING BELOW THIS LINE!!
	DO NOT TOUCH ANYTHING BELOW THIS LINE!!
	DO NOT TOUCH ANYTHING BELOW THIS LINE!!
	DO NOT TOUCH ANYTHING BELOW THIS LINE!!
	DO NOT TOUCH ANYTHING BELOW THIS LINE!!
	DO NOT TOUCH ANYTHING BELOW THIS LINE!!
	DO NOT TOUCH ANYTHING BELOW THIS LINE!!
	DO NOT TOUCH ANYTHING BELOW THIS LINE!!
	DO NOT TOUCH ANYTHING BELOW THIS LINE!!
	DO NOT TOUCH ANYTHING BELOW THIS LINE!!
	DO NOT TOUCH ANYTHING BELOW THIS LINE!!
	DO NOT TOUCH ANYTHING BELOW THIS LINE!!
	DO NOT TOUCH ANYTHING BELOW THIS LINE!!
	DO NOT TOUCH ANYTHING BELOW THIS LINE!!
	DO NOT TOUCH ANYTHING BELOW THIS LINE!!

*/
define MOD_TOGGLE_BLOCK_TIMER = 1000 ;
define OLED_WAIT_TIMER = 2000 ;
int binary_trigger;
int semi_auto;
int rapid_fire;
int auto_spot;
int auto_movement;
int turbo_melee;
int anti_recoil;
int current_stick_position;
int adjusted_anti_recoil_strength;

const string RapidFireON = "RAPID - ON " ; // 11 character maximum
const string RapidFireOFF = "RAPID - OFF" ; // 11 character maximum
const string BinaryON = "BINARY - ON" ; // 11 character maximum
const string BinaryOFF = "BINARY -OFF" ; // 11 character maximum
const string SemiAutoON = "SEMI - ON " ; // 11 character maximum
const string SemiAutoOFF = "SEMI - OFF " ; // 11 character maximum
const string AutoSpotON = "SPOT - ON  " ; // 11 character maximum
const string AutoSpotOFF = "SPOT - OFF " ; // 11 character maximum
const string AntiRecoilON = "RECOIL - ON" ; // 11 character maximum
const string AntiRecoilOFF = "RECOIL -OFF" ; // 11 character maximum
const string TurboMeleeON = "MELEE - ON " ; // 11 character maximum
const string TurboMeleeOFF = "MELEE - OFF" ; // 11 character maximum


main {
	
	set_val(TRACE_1,(anti_recoil_strength));
	set_val(TRACE_2,(auto_spot));
	combo_run(OLED);
	
	// MOD TOGGLES BELOW THIS LINE
	if((get_keyboard(RAPID_FIRE_KEY)) && !combo_running(RAPID_FIRE_TOGGLE)){ // RAPID FIRE MOD TOGGLE
    	combo_run(RAPID_FIRE_TOGGLE);
    	semi_auto = 0;
		binary_trigger = 0;
    } 
    if(!get_keyboard(RAPID_FIRE_KEY)) combo_stop(RAPID_FIRE_TOGGLE);
    
    if((get_keyboard(BINARY_TRIGGER_KEY)) && !combo_running(BINARY_TRIGGER_TOGGLE)){ // BIANARY TRIGGER MOD TOGGLE
    	combo_run(BINARY_TRIGGER_TOGGLE);
    	rapid_fire = 0;
		semi_auto = 0;
    } 
    if(!get_keyboard(BINARY_TRIGGER_KEY)) combo_stop(BINARY_TRIGGER_TOGGLE);
    
    if((get_keyboard(SEMI_AUTO_KEY)) && !combo_running(SEMI_AUTO_TOGGLE)){ // SEMI AUTO MOD TOGGLE
    	combo_run(SEMI_AUTO_TOGGLE);
    	rapid_fire = 0;
		binary_trigger = 0;
    } 
    if(!get_keyboard(SEMI_AUTO_KEY)) combo_stop(SEMI_AUTO_TOGGLE);
    
    if((get_keyboard(AUTO_SPOT_KEY)) && !combo_running(AUTO_SPOT_TOGGLE)){ // AUTO SPOT MOD TOGGLE
    	combo_run(AUTO_SPOT_TOGGLE);
    } 
    if(!get_keyboard(AUTO_SPOT_KEY)) combo_stop(AUTO_SPOT_TOGGLE);
    
    if(get_keyboard(AUTO_MOVEMENT_KEY)){ // AUTO MOVEMENT MOD TOGGLE
    	auto_movement = TRUE;
    }
    
    if((get_keyboard(TURBO_MELEE_KEY)) && !combo_running(TURBO_MELEE_TOGGLE)){ // TURBO MELEE MOD TOGGLE
    	combo_run(TURBO_MELEE_TOGGLE);
    }
    
    if(!get_keyboard(TURBO_MELEE_KEY)) combo_stop(TURBO_MELEE_TOGGLE);
    
 	if((get_keyboard(ANTI_RECOIL_KEY)) && !combo_running(ANTI_RECOIL_TOGGLE)){ // ANTI RECOIL MOD TOGGLE
    	combo_run(ANTI_RECOIL_TOGGLE);
    } 
    if(!get_keyboard(ANTI_RECOIL_KEY)) combo_stop(ANTI_RECOIL_TOGGLE);
    
    if((get_keyboard(INCREASE_ANTI_RECOIL_STRENGTH_KEY)) && !combo_running(INCREASE_ANTI_RECOIL_STRENGTH)){ // INCREASE ANTI RECOIL STRENGTH
    	combo_run(INCREASE_ANTI_RECOIL_STRENGTH);
    } 
    if(!get_keyboard(INCREASE_ANTI_RECOIL_STRENGTH_KEY)) combo_stop(INCREASE_ANTI_RECOIL_STRENGTH);
       
    if((get_keyboard(DECREASE_ANTI_RECOIL_STRENGTH_KEY)) && !combo_running(DECREASE_ANTI_RECOIL_STRENGTH)){ // DECREASE ANTI RECOIL STRENGTH
    	combo_run(DECREASE_ANTI_RECOIL_STRENGTH);
    } 
    if(!get_keyboard(DECREASE_ANTI_RECOIL_STRENGTH_KEY)) combo_stop(DECREASE_ANTI_RECOIL_STRENGTH);
    
    if(get_keyboard(CIRCLE_WALK_KEY)) combo_run(CIRCLE_WALK); // ENABLE CIRCLE WALK
	
	// END OF MOD TOGGLES
	
	
	if(auto_spot){
		if((event_press(XB1_RT)) && !combo_running(AUTO_SPOT)) combo_run(AUTO_SPOT);
	}
	
	if(turbo_melee){
		if(get_val(XB1_RS)) combo_run(TURBO_MELEE);
	}
	
	if(rapid_fire){
		if(get_val(XB1_RT)) combo_run(RAPIDFIRE);
		if(event_release(XB1_RT)) combo_stop(RAPIDFIRE);
	}
	
	if(semi_auto){
		if(get_val(XB1_RT)){
		if((get_ptime(XB1_RT)) > 50) set_val(XB1_RT,0);
		}
	}
		
	if(binary_trigger){
		if(get_val(XB1_RT)){
		if((get_ptime(XB1_RT)) > 50) set_val(XB1_RT,0);
		}
		if(event_release(XB1_RT)) combo_run(RAPIDFIRE);
	}
	
	if(auto_movement){
		set_val(XB1_LY,-100);
		set_val(XB1_LS,100);
		if(event_press(XB1_LY)) auto_movement = FALSE;
	}
	
	if(anti_recoil){
		//if((get_val(XB1_RT)) && (get_rumble(RUMBLE_A)) > 90){ // This line is causing my Zen to crash, so I removed this for now.
		if(get_val(XB1_RT)){ // This is used instead of the above line. This prevents the Zen from crashing, although not ideal activation.		
			if(current_stick_position = 0) adjusted_anti_recoil_strength = anti_recoil_strength;	
			current_stick_position = get_val(XB1_RY);	
			if((current_stick_position > in_game_deadzone)&& current_stick_position != 0){
				adjusted_anti_recoil_strength = ((current_stick_position - in_game_deadzone) + anti_recoil_strength);
			}
			if((current_stick_position < in_game_deadzone)&& current_stick_position != 0){
				adjusted_anti_recoil_strength = ((current_stick_position + in_game_deadzone) - anti_recoil_strength)
			}		
			combo_run(ANTI_RECOIL);
			if(event_press(XB1_UP)) anti_recoil_strength = (anti_recoil_strength - 1);
			if(event_press(XB1_DOWN)) anti_recoil_strength = (anti_recoil_strength + 1);
		}
	}
	
	

}// END OF MAIN


// MOD TOGGLE COMBOS BELOW THIS LINE
combo RAPID_FIRE_TOGGLE {
	rapid_fire = !rapid_fire;
	wait(0001);
	wait(MOD_TOGGLE_BLOCK_TIMER); // Timer Put In Place To Block Input
}

combo BINARY_TRIGGER_TOGGLE {
	binary_trigger = !binary_trigger;
	wait(0001);
	wait(MOD_TOGGLE_BLOCK_TIMER); // Timer Put In Place To Block Input
}

combo SEMI_AUTO_TOGGLE {
	semi_auto = !semi_auto;
	wait(0001);
	wait(MOD_TOGGLE_BLOCK_TIMER); // Timer Put In Place To Block Input
}

combo AUTO_SPOT_TOGGLE {
	auto_spot = !auto_spot;
	wait(0001);
	wait(MOD_TOGGLE_BLOCK_TIMER); // Timer Put In Place To Block Input
}

combo ANTI_RECOIL_TOGGLE {
	anti_recoil = !anti_recoil;
	wait(0001);
	wait(MOD_TOGGLE_BLOCK_TIMER); // Timer Put In Place To Block Input
}

combo TURBO_MELEE_TOGGLE {
	turbo_melee = !turbo_melee;
	wait(0001);
	wait(MOD_TOGGLE_BLOCK_TIMER); // Timer Put In Place To Block Input
}

combo INCREASE_ANTI_RECOIL_STRENGTH {
	anti_recoil_strength = (anti_recoil_strength + 1);
	wait(0001);
	wait(MOD_TOGGLE_BLOCK_TIMER); // Timer Put In Place To Block Input
}

combo DECREASE_ANTI_RECOIL_STRENGTH {
	anti_recoil_strength = (anti_recoil_strength - 1);
	wait(0001);
	wait(MOD_TOGGLE_BLOCK_TIMER); // Timer Put In Place To Block Input
}

// MOD TOGGLE COMBOS ABOVE THIS LINE


combo RAPIDFIRE{
	set_val(XB1_RT,100);
	wait(40);
	set_val(XB1_RT,0);
	wait(50);
}

combo AUTO_SPOT {
	set_val(XB1_RB,100);
	wait(50);
	set_val(XB1_RB,0);
	wait(50);
	wait(ANTI_SPAM_TIMER);
}

combo CIRCLE_WALK {
	set_val(XB1_LX,-100);
	wait(CIRCLE_WALK_TIMER);
	set_val(XB1_LY,100);
	wait(CIRCLE_WALK_TIMER);
	set_val(XB1_LX,100);
	wait(CIRCLE_WALK_TIMER);
	set_val(XB1_LY,-100);
	wait(CIRCLE_WALK_TIMER);
}

combo TURBO_MELEE {
	set_val(XB1_RS,100);
	wait(50);
	set_val(XB1_RS,0);
	wait(50);
}

combo ANTI_RECOIL {
	if(invert_y == TRUE){
		if(!get_val(XB1_RY)) {
			set_val(XB1_RY,anti_recoil_strength*-1);
		}
		else {
			set_val(XB1_RY,adjusted_anti_recoil_strength);
		}
	}
	if(invert_y == FALSE){
		if(!get_val(XB1_RY)) {
			set_val(XB1_RY,anti_recoil_strength);
		}
		else {
			set_val(XB1_RY,adjusted_anti_recoil_strength);
		}
	}
}

combo OLED{
	if(rapid_fire){
		cls_oled(0); // Clear the OLED screen
		printf(5, 5, 1, 0, RapidFireON[0]);
	}
	if(!rapid_fire){
		cls_oled(0); // Clear the OLED screen
		printf(5, 5, 1, 0, RapidFireOFF[0]);
	}
	wait(OLED_WAIT_TIMER);
	if(semi_auto){
		cls_oled(0); // Clear the OLED screen
		printf(5, 5, 1, 0, SemiAutoON[0]);
	}
	if(!semi_auto){
		cls_oled(0); // Clear the OLED screen
		printf(5, 5, 1, 0, SemiAutoOFF[0]);
	}
	wait(OLED_WAIT_TIMER);
	if(binary_trigger){
		cls_oled(0); // Clear the OLED screen
		printf(5, 5, 1, 0, BinaryON[0]);
	}
	if(!binary_trigger){
		cls_oled(0); // Clear the OLED screen
		printf(5, 5, 1, 0, BinaryOFF[0]);
	}
	wait(OLED_WAIT_TIMER);
	if(auto_spot){
		cls_oled(0); // Clear the OLED screen
		printf(5, 5, 1, 0, AutoSpotON[0]);
	}
	if(!auto_spot){
		cls_oled(0); // Clear the OLED screen
		printf(5, 5, 1, 0, AutoSpotOFF[0]);
	}
	wait(OLED_WAIT_TIMER);
	if(anti_recoil){
		cls_oled(0); // Clear the OLED screen
		printf(5, 5, 1, 0, AntiRecoilON[0]);
	}
	if(!anti_recoil){
		cls_oled(0); // Clear the OLED screen
		printf(5, 5, 1, 0, AntiRecoilOFF[0]);
	}
	wait(OLED_WAIT_TIMER);
	if(turbo_melee){
		cls_oled(0); // Clear the OLED screen
		printf(5, 5, 1, 0, TurboMeleeON[0]);
	}
	if(!turbo_melee){
		cls_oled(0); // Clear the OLED screen
		printf(5, 5, 1, 0, TurboMeleeOFF[0]);
	}
	wait(OLED_WAIT_TIMER);	
	
	
	cls_oled(0); // Clear the OLED screen
	wait(OLED_WAIT_TIMER);
}